While working on the next generation of the trendrr api we were looking for a technology to solve a couple of unique problems.  

First we wanted to be able to offer api calls that could handle extremely high volume with low latency, while still maintaining the easy to use RESTful interface.  
For example, there are tasks that we are very good at doing extremely fast that could be useful to others such as sentiment analysis.  It is easy to offer a simple 
api call such as api.trendrr.com/sentiment?text=some text.  The problem is that if company X wants to use that to process realtime data at scale the latency of HTTP 
becomes too high.  

The next problem is that we want to offer streaming realtime results at scale.  If user X wants all results for one of their trendrr projects then 
we wanted to provide a streaming endpoint like api.trendrr.com/stream?project_id=XXXXXXXXXX.  Twitter has approached this problem via http streams, and it works moderately 
well, it is limited however in that once the stream is established no further communication can come from the client.  To solve these issues we have developed a new 
protocol called STREST which is compatible with HTTP and allows fully duplexed streaming connections.  

The last problem was we wanted to be able to easy stream results to a webbrowser.  Strest Server supports websockets out of the box, and we provide a javascript websocket driver as well
as a number of examples.  

We are big supporters of opensource software and we are proud 
to annouce the release of the protocol spec, a high quality server implementation
and drivers in Java, Python, and Javascript as open source projects.  To learn more, please look at the protocol spec, and the Strest Server introduction.  We think 
you'll be amazed at how easy it is to understand and natural it is to develop.  

